{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.tsx","webpack:///./src/components/head.tsx","webpack:///./src/components/projectcard.tsx"],"names":["StyledGrid","styled","div","withConfig","displayName","componentId","TagTemplate","render","_this$props","this","props","pageContext","data","tag","siteTitle","site","siteMetadata","title","projects","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_head__WEBPACK_IMPORTED_MODULE_4__","keywords","map","_ref","node","_components_projectcard__WEBPACK_IMPORTED_MODULE_5__","React","Component","pageQuery","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","StaticQueryDataRenderer","staticQueryData","query","finalData","Fragment","children","Consumer","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","shape","pathname","StyledNav","nav","StyledFooter","footer","Layout","className","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","href","Head","_this","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","metaDescription","description","lang","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","meta","name","content","property","concat","length","join","_public_static_d_872482878_json__WEBPACK_IMPORTED_MODULE_1__","CardWrapper","CardHeader","header","CardHeading","h1","CardBody","ProjectCard","frontmatter","fields","slug","key","date","dangerouslySetInnerHTML","__html","excerpt"],"mappings":"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","file":"component---src-templates-tag-tsx-9ce239a3b50e8249229e.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\n\nimport Layout from '../components/layout';\nimport Head from '../components/head';\nimport ProjectCard from '../components/projectcard';\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: {\n    tag: string\n  }\n}\n\nconst StyledGrid = styled.div`\n{\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n  padding-bottom: 36px;\n}\n`;\n\nexport default class TagTemplate extends React.Component<Props> {\n  render() {\n    const { pageContext, data } = this.props\n    const { tag } = pageContext\n    const siteTitle = data.site.siteMetadata.title\n    const projects = data.allMarkdownRemark.edges\n\n    return (\n      <Layout title={siteTitle}>\n        <Head\n          title={'Projects tagged \"${tag}\"'}\n          keywords={['portfolio', 'gatsby', 'typescript', 'react', tag]}\n        />\n        <article>\n          <header>\n            <h1>Projects tagged {tag}</h1>\n          </header>\n          <StyledGrid>\n            {projects.map(({ node }) => {\n              return (\n                <ProjectCard node={node} />\n              )\n            })}\n          </StyledGrid>\n        </article>\n      </Layout>\n    )\n  }\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    totalCount: number\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 1000, filter: {frontmatter: {tags: {in: [$tag]}}}) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 2500)\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst StyledNav = styled.nav`\n  ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    display: inline-block;\n    margin: 16px;\n\n    a {\n      background: none;\n    }\n  }\n`;\n\nconst StyledFooter = styled.footer`\n  padding-bottom: 36px;\n`;\n\ninterface Props {\n  readonly title?: string\n}\n\nexport default class Layout extends React.Component<Props> {\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <StyledNav className='navigation'>\n          <ul>\n            <li>\n              <Link to={`/`}>&plusmn;</Link>\n            </li>\n            <li>\n              <Link to={`/tags`}>Categories</Link>\n            </li>\n            <li>\n              <Link to={`/about`}>About</Link>\n            </li>\n          </ul>\n        </StyledNav>\n        <div className='content'>\n          {children}\n        </div>\n        <StyledFooter className='footer'>\n          Built with\n          {' '}\n          <a href='https://gatsbyjs.org'>Gatsby</a>\n          {' '}\n          and\n          {' '}\n          <a href='https://typescriptlang.org'>Typescript</a>\n        </StyledFooter>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\ntype StaticQueryData = {\n  site: {\n    siteMetadata: {\n      title: string\n      description: string\n      author: {\n        name: string\n      }\n    }\n  }\n}\n\ninterface Props {\n  readonly title: string\n  readonly description?: string\n  readonly lang?: string\n  readonly keywords?: string[]\n}\n\nexport default class Head extends React.Component<Props> {\n  render() {\n    return (\n      <StaticQuery\n        query={graphql`\n          query {\n            site {\n              siteMetadata {\n                title\n                description\n                author {\n                  name\n                }\n              }\n            }\n          }\n        `}\n        render={(data: StaticQueryData) => {\n          const metaDescription = this.props.description || data.site.siteMetadata.description\n          const lang = this.props.lang || 'en'\n          const title = this.props.title\n          const keywords = this.props.keywords || []\n          return (\n            <Helmet\n              htmlAttributes={{\n                lang,\n              }}\n              title={title}\n              titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n              meta={[\n                {\n                  name: `description`,\n                  content: metaDescription,\n                },\n                {\n                  property: `og:title`,\n                  content: title,\n                },\n                {\n                  property: `og:description`,\n                  content: metaDescription,\n                },\n                {\n                  property: `og:type`,\n                  content: `website`,\n                },\n              ].concat(\n                keywords.length > 0\n                  ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                  : [],\n              )}\n            />\n          )\n        }}\n      />\n    )\n  }\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\ninterface Props {\n  readonly node: Node\n}\n\ninterface Node {\n  fields: {\n    slug: string\n  }\n  frontmatter: {\n    title: string\n    date: string\n  }\n  excerpt: string\n}\n\nconst CardWrapper = styled.div`\n  overflow: hidden;\n  padding: 0 0 32px;\n  margin: 48px auto 0;\n  width: 300px;\n  font-family: sans-serif;\n  box-shadow: 0 0 20px rgba(0, 0, 0, .05), 0 0px 40px rgba(0, 0, 0, .08);\n  border-radius: 5px;\n`\n\nconst CardHeader = styled.header`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst CardHeading = styled.h1`\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n`\n\nconst CardBody = styled.div`\n  padding-right: 32px;\n  padding-left: 32px;\n`\n\nexport default class ProjectCard extends React.Component<Props> {\n  render() {\n    const { node } = this.props;\n    const title = node.frontmatter.title || node.fields.slug;\n    return (\n      <CardWrapper key={node.fields.slug} >\n        <CardHeading>\n          <CardHeader>\n            <Link to={node.fields.slug}>{title}</Link>\n          </CardHeader>\n        </CardHeading>\n        <CardBody>\n          <small>{node.frontmatter.date}</small>\n          <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </CardBody>\n      </CardWrapper>\n    );\n  }\n}\n"],"sourceRoot":""}